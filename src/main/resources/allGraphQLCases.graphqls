scalar Date @testDirective(value:"on Scalar") @anotherTestDirective
scalar Long

# A test directive, that can be added anywhere
directive @testDirective(
  value: String! = "A value to test default values"
  anotherValue: String
  anInt: Int
  aFloat: Float
  aBoolean: Boolean
  anID: ID
  anEnum: Episode = JEDI # not supported by graphql-java v14.0 on server side. It works Ok on client side
  aCustomScalarDate: Date = "2000-12-31"
) on
# ExecutableDirectiveLocation
# SUBSCRIPTION value is not currently managed by graphql-java (as of v14.0)
	QUERY | MUTATION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT |
# TypeSystemDirectiveLocation
	SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

# Another test directive, to check that two directives can be added
directive @anotherTestDirective
on
# ExecutableDirectiveLocation
# SUBSCRIPTION value is not currently managed by graphql-java (as of v14.0)
	QUERY | MUTATION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT |
# TypeSystemDirectiveLocation
	SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

schema @testDirective(value:"on Schema") {
	#A comment on the query
    query: MyQueryType
    mutation: AnotherMutationType
}

type MyQueryType {
	withoutParameters: [Character]!
    withOneOptionalParam(character: CharacterInput): Character
    withOneMandatoryParam(character: CharacterInput!): Character
    #withOneMandatoryParamDefaultValue(nbResultat: Int! = 13): Character!
    #withTwoMandatoryParamDefaultVal(theHero: DroidInput!, num: Int = 45): Droid!
    withEnum(episode: Episode! = NEWHOPE): Character
    
    ################################################################################
    # withList return a list of Characters, matching the given list of CharacterInput.
    # The name of the first Character returned is replaced by the given firstName.
    # All ids are generated  
    withList(firstName: String!, characters: [CharacterInput]!): [Character]

    ################################################################################
   	# Complementary tests with the AllFieldCases Object
	allFieldCases(input: AllFieldCasesInput): AllFieldCases    
        
    ################################################################################
    # error always returns an error!  (used to check the error management)
    error(errorLabel: String!): Character!
    
    # Check for GraphQL identifier that are java keywords
    aBreak: break
    
    ################################################################################
    # queries to check directive behavior
    
    # Returns the value, and potentially the anotherValue of the @testDirective directive set on the @directiveOnQuery. 
    # List is null if the directive is not present.
    directiveOnQuery(uppercase: Boolean): [String]!

    # Returns the value, and potentially the anotherValue of the @testDirective directive set on the @directiveOnQuery. 
    # List is null if the directive is not present.
    directiveOnField: Character!
}

type AnotherMutationType {
	createHuman(human: HumanInput!): Human!
	createAllFieldCases(input: AllFieldCasesInput!): AllFieldCases!
}

enum Episode @testDirective(
		value: "on Enum", 
		anotherValue: "69", 
		anInt: 666, 
		aFloat: 666.666, 
		aBoolean: true, 
		anID: "00000000-0000-0000-0000-000000000002", 
		anEnum: NEWHOPE, 
		aCustomScalarDate: "2001-02-28") {
    NEWHOPE
    EMPIRE @anotherTestDirective
    JEDI
    DOES_NOT_EXIST  @testDirective(value:"on Enum", anotherValue: "-1") @anotherTestDirective
}

interface WithID @testDirective(value:"on Interface", anotherValue: "666") {
   id: ID!
}

interface Character @testDirective(value:"on Character interface") @anotherTestDirective {
    id: ID!
    name: String! @testDirective(value:"on interface field") @anotherTestDirective
    friends: [Character]
    appearsIn: [Episode]! @anotherTestDirective
}

#union AnyCharacter @testDirective(value:"on Union")
#= Human | Droid

input CharacterInput {
    name: String!
    friends: [CharacterInput]
    appearsIn: [Episode]!
    # type should be one of Human or Droid
    type: String!
}

interface Commented {
	nbComments: Int
    comments: [String]
}

input AllFieldCasesInput @testDirective(value:"on Input Type") {
    id: ID! @testDirective(value:"on Input Field")
    name: String!
    forname: String
    age: Long!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    withIdSubtype: [AllFieldCasesWithIdSubtypeInput!]
    withoutIdSubtype: [AllFieldCasesWithoutIdSubtypeInput!]
}

input AllFieldCasesWithIdSubtypeInput {
    id: ID!
    name: String!
}

input FieldParameterInput {
	uppercase: Boolean
	date: Date
}

input AllFieldCasesWithoutIdSubtypeInput {
    name: String!
}

enum Unit {
    YEAR
    MONTH
    MINUTE
}


# This type is a clone of the InterfaceAllFieldCases interface. 
# Both should contains all possible combinations of parameters, data type, list, mandatory field or items...
type AllFieldCases implements WithID @testDirective(value:"on Object") @anotherTestDirective {
    id: ID! @testDirective(value:"on Field")
    name: String! @relation(name: "an id's relation", direction: OUT)
    forname(uppercase: Boolean @testDirective(value:"on Argument"), textToAppendToTheForname: String): String
    age(unit: Unit = YEAR) : Long!   @deprecated(reason: "This is a test")
    date: Date
    dates: [Date]!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    friends: [Human!]
    oneWithIdSubType: AllFieldCasesWithIdSubtype
    listWithIdSubTypes(nbItems: Long!, date: Date, dates: [Date]!, uppercaseName: Boolean, textToAppendToTheForname: String): [AllFieldCasesWithIdSubtype]
    oneWithoutIdSubType(input: FieldParameterInput): AllFieldCasesWithoutIdSubtype
    listWithoutIdSubTypes(nbItems: Long!, input: FieldParameterInput, textToAppendToTheForname: String): [AllFieldCasesWithoutIdSubtype]
}

# This interface is a clone of the AllFieldCases type. 
# Both should contains all possible combinations of parameters, data type, list, mandatory field or items...
interface AllFieldCasesInterface {
    id: ID!
    name: String!
    forname(uppercase: Boolean, textToAppendToTheForname: String): String
    age: Int!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    friends: [Human!]
    oneWithIdSubType: AllFieldCasesWithIdSubtype
    listWithIdSubTypes(nbItems: Int!, uppercaseName: Boolean, textToAppendToTheForname: String): [AllFieldCasesWithIdSubtype]
    oneWithoutIdSubType(input: FieldParameterInput): AllFieldCasesWithoutIdSubtype
    listWithoutIdSubTypes(nbItems: Int!, input: FieldParameterInput, textToAppendToTheForname: String): [AllFieldCasesWithoutIdSubtype]
}

# A concrete class that just implements the above interface
type AllFieldCasesInterfaceType implements AllFieldCasesInterface {
    id: ID!
    name: String!
    forname(uppercase: Boolean, textToAppendToTheForname: String): String
    age: Int!
    nbComments: Int
    comments: [String]
    booleans: [Boolean!]
    aliases: [String]!
    planets: [String!]!
    friends: [Human!]
    oneWithIdSubType: AllFieldCasesWithIdSubtype
    listWithIdSubTypes(nbItems: Int!, uppercaseName: Boolean, textToAppendToTheForname: String): [AllFieldCasesWithIdSubtype]
    oneWithoutIdSubType(input: FieldParameterInput): AllFieldCasesWithoutIdSubtype
    listWithoutIdSubTypes(nbItems: Int!, input: FieldParameterInput, textToAppendToTheForname: String): [AllFieldCasesWithoutIdSubtype]
}

type AllFieldCasesWithIdSubtype {
    id: ID!
    name: String!
}

type AllFieldCasesWithoutIdSubtype {
    name: String!
}

type Human implements Character & Commented &  WithID {
    id: ID!
    name: String!
    bestFriend: Character
    friends: [Character]
	nbComments: Int
    comments: [String]
    appearsIn: [Episode]!
    homePlanet: String
}


input HumanInput {
    name: String!
    bestFriend: CharacterInput
    friends: [CharacterInput]
	nbComments: Int
    comments: [String]
    appearsIn: [Episode]!
    homePlanet: String
}

type Droid implements Character & WithID {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    primaryFunction: String
}

input DroidInput {
    name: String!
    friends: [CharacterInput]
    appearsIn: [Episode]!
    primaryFunction: String
}


scalar else

enum extends {
	INT
	DOUBLE
	FLOAT
	LONG
}

input class {
	default: String
}

type break {
	case(test: extends!, if: else): extends
}



#############################
# test for issue #35
#
# But removed from this GraphQL schema as enum values in Directives are not supported by graphql-java v14.0 on server side
# It works Ok on client side

directive @relation(
    name: String
    direction: direction
) on FIELD_DEFINITION

enum direction {
    IN
    OUT
}
#############################

#############################
# test for issue #36

type TestExtScalar {
bad: NonNegativeInt
}

scalar NonNegativeInt

#############################
