/** Generated by the default template from graphql-java-generator */
package org.allGraphQLCases.server;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
import static graphql.schema.idl.TypeRuntimeWiring.newTypeWiring;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;

import javax.annotation.PostConstruct;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.dataloader.DataLoader;
import org.dataloader.DataLoaderRegistry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;
import org.springframework.util.FileCopyUtils;

import graphql.GraphQL;
import graphql.TypeResolutionEnvironment;
import graphql.language.FieldDefinition;
import graphql.language.InterfaceTypeDefinition;
import graphql.language.ObjectTypeDefinition;
import graphql.language.Type;
import graphql.language.TypeName;
import graphql.schema.GraphQLObjectType;
import graphql.schema.GraphQLSchema;
import graphql.schema.TypeResolver;
import graphql.schema.idl.RuntimeWiring;
import graphql.schema.idl.SchemaGenerator;
import graphql.schema.idl.SchemaParser;
import graphql.schema.idl.TypeDefinitionRegistry;

import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Date;

/**
 * This class is responsible for providing all the GraphQL Beans to the graphql-java Spring Boot integration.
 * <BR/><BR/>
 * Based on the https://www.graphql-java.com/tutorials/getting-started-with-spring-boot/ tutorial
 * 
 * @author etienne-sf
 */
@Component
public class GraphQLProvider {

	/** The logger for this instance */
	protected Logger logger = LoggerFactory.getLogger(GraphQLProvider.class);

	@Autowired
	ApplicationContext applicationContext;

	@Autowired
	GraphQLDataFetchers graphQLDataFetchers;

	private GraphQLSchema graphQLSchema;
	private GraphQL graphQL;

	@Bean
	public GraphQL graphQL() {
		return graphQL;
	}

	/**
	 * The {@link DataLoaderRegistry} will be autowired by Spring in the GraphQL Java Spring Boot framework. It will
	 * then be wired for each request execution, as specified in this page:
	 * <A HREF="https://www.graphql-java.com/documentation/master/batching/">graphql-java batching</A>
	 * 
	 * @return
	 */
	@Bean
	public DataLoaderRegistry dataLoaderRegistry() {
		logger.debug("Creating DataLoader registry");
		DataLoaderRegistry registry = new DataLoaderRegistry();
		DataLoader<Object, Object> dl;

		for (BatchLoaderDelegate<?, ?> batchLoaderDelegate : applicationContext
				.getBeansOfType(BatchLoaderDelegate.class).values()) {
			// Let's check that we didn't already register a BatchLoaderDelegate with this name
			if ((dl = registry.getDataLoader(batchLoaderDelegate.getName())) != null) {
				throw new RuntimeException(
						"Only one BatchLoaderDelegate with a given name is allows, but two have been found: "
								+ dl.getClass().getName() + " and " + batchLoaderDelegate.getClass().getName());
			}
			// Ok, let's register this new one.
			registry.register(batchLoaderDelegate.getName(), DataLoader.newDataLoader(batchLoaderDelegate));
		}

		return registry;
	}
	
	@PostConstruct
	public void init() throws IOException {
		Resource res;
		StringBuffer sdl = new StringBuffer();
		res = new ClassPathResource("/allGraphQLCases.graphqls");
		try(Reader reader = new InputStreamReader(res.getInputStream(), Charset.forName("UTF8"))) {
			sdl.append(FileCopyUtils.copyToString(reader));
		}
		this.graphQL = GraphQL.newGraphQL(buildSchema(sdl.toString())).build();
	}

	private GraphQLSchema buildSchema(String sdl) {
		TypeDefinitionRegistry typeRegistry = new SchemaParser().parse(sdl);

		RuntimeWiring runtimeWiring = buildWiring();
		SchemaGenerator schemaGenerator = new SchemaGenerator();
		graphQLSchema = schemaGenerator.makeExecutableSchema(typeRegistry, runtimeWiring);
		return graphQLSchema;
	}
	
	public GraphQLSchema getGraphQLSchema() {
		return graphQLSchema;
	}

	private RuntimeWiring buildWiring() {
		// Thanks to this thread :
		// https:// stackoverflow.com/questions/54251935/graphql-no-resolver-definied-for-interface-union-java
		//
		// Also see sample :
		// https://github.com/graphql-java/graphql-java-examples/tree/master/http-example
		return RuntimeWiring.newRuntimeWiring()
			.scalar(com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date)
			.scalar(org.allGraphQLCases.server.impl.GraphQLScalarTypeElse.getElseScalar())
			.scalar(graphql.Scalars.GraphQLLong)
			.scalar(graphql.scalars.ExtendedScalars.NonNegativeInt)
			// Data fetchers for DataFetchersDelegateMyQueryType
			.type(newTypeWiring("MyQueryType").dataFetcher("withoutParameters", graphQLDataFetchers.dataFetchersDelegateMyQueryTypeWithoutParameters()))
			.type(newTypeWiring("MyQueryType").dataFetcher("withOneOptionalParam", graphQLDataFetchers.dataFetchersDelegateMyQueryTypeWithOneOptionalParam()))
			.type(newTypeWiring("MyQueryType").dataFetcher("withOneMandatoryParam", graphQLDataFetchers.dataFetchersDelegateMyQueryTypeWithOneMandatoryParam()))
			.type(newTypeWiring("MyQueryType").dataFetcher("withEnum", graphQLDataFetchers.dataFetchersDelegateMyQueryTypeWithEnum()))
			.type(newTypeWiring("MyQueryType").dataFetcher("withList", graphQLDataFetchers.dataFetchersDelegateMyQueryTypeWithList()))
			.type(newTypeWiring("MyQueryType").dataFetcher("allFieldCases", graphQLDataFetchers.dataFetchersDelegateMyQueryTypeAllFieldCases()))
			.type(newTypeWiring("MyQueryType").dataFetcher("error", graphQLDataFetchers.dataFetchersDelegateMyQueryTypeError()))
			.type(newTypeWiring("MyQueryType").dataFetcher("aBreak", graphQLDataFetchers.dataFetchersDelegateMyQueryTypeABreak()))
			.type(newTypeWiring("MyQueryType").dataFetcher("directiveOnQuery", graphQLDataFetchers.dataFetchersDelegateMyQueryTypeDirectiveOnQuery()))
			.type(newTypeWiring("MyQueryType").dataFetcher("directiveOnField", graphQLDataFetchers.dataFetchersDelegateMyQueryTypeDirectiveOnField()))
			// Data fetchers for DataFetchersDelegateAnotherMutationType
			.type(newTypeWiring("AnotherMutationType").dataFetcher("createHuman", graphQLDataFetchers.dataFetchersDelegateAnotherMutationTypeCreateHuman()))
			.type(newTypeWiring("AnotherMutationType").dataFetcher("createAllFieldCases", graphQLDataFetchers.dataFetchersDelegateAnotherMutationTypeCreateAllFieldCases()))
			// Data fetchers for DataFetchersDelegateAllFieldCases
			.type(newTypeWiring("AllFieldCases").dataFetcher("dates", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesDates()))
			.type(newTypeWiring("AllFieldCases").dataFetcher("comments", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesComments()))
			.type(newTypeWiring("AllFieldCases").dataFetcher("booleans", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesBooleans()))
			.type(newTypeWiring("AllFieldCases").dataFetcher("aliases", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesAliases()))
			.type(newTypeWiring("AllFieldCases").dataFetcher("planets", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesPlanets()))
			.type(newTypeWiring("AllFieldCases").dataFetcher("friends", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesFriends()))
			.type(newTypeWiring("AllFieldCases").dataFetcher("oneWithIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesOneWithIdSubType()))
			.type(newTypeWiring("AllFieldCases").dataFetcher("oneWithIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesOneWithIdSubTypeWithDataLoader()))
			.type(newTypeWiring("AllFieldCases").dataFetcher("listWithIdSubTypes", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesListWithIdSubTypes()))
			.type(newTypeWiring("AllFieldCases").dataFetcher("oneWithoutIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesOneWithoutIdSubType()))
			.type(newTypeWiring("AllFieldCases").dataFetcher("listWithoutIdSubTypes", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesListWithoutIdSubTypes()))
			// Data fetchers for DataFetchersDelegateAllFieldCasesInterfaceType
			.type(newTypeWiring("AllFieldCasesInterfaceType").dataFetcher("comments", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceTypeComments()))
			.type(newTypeWiring("AllFieldCasesInterfaceType").dataFetcher("booleans", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceTypeBooleans()))
			.type(newTypeWiring("AllFieldCasesInterfaceType").dataFetcher("aliases", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceTypeAliases()))
			.type(newTypeWiring("AllFieldCasesInterfaceType").dataFetcher("planets", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceTypePlanets()))
			.type(newTypeWiring("AllFieldCasesInterfaceType").dataFetcher("friends", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceTypeFriends()))
			.type(newTypeWiring("AllFieldCasesInterfaceType").dataFetcher("oneWithIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceTypeOneWithIdSubType()))
			.type(newTypeWiring("AllFieldCasesInterfaceType").dataFetcher("oneWithIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceTypeOneWithIdSubTypeWithDataLoader()))
			.type(newTypeWiring("AllFieldCasesInterfaceType").dataFetcher("listWithIdSubTypes", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceTypeListWithIdSubTypes()))
			.type(newTypeWiring("AllFieldCasesInterfaceType").dataFetcher("oneWithoutIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceTypeOneWithoutIdSubType()))
			.type(newTypeWiring("AllFieldCasesInterfaceType").dataFetcher("listWithoutIdSubTypes", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceTypeListWithoutIdSubTypes()))
			// Data fetchers for DataFetchersDelegateHuman
			.type(newTypeWiring("Human").dataFetcher("bestFriend", graphQLDataFetchers.dataFetchersDelegateHumanBestFriend()))
			.type(newTypeWiring("Human").dataFetcher("bestFriend", graphQLDataFetchers.dataFetchersDelegateHumanBestFriendWithDataLoader()))
			.type(newTypeWiring("Human").dataFetcher("friends", graphQLDataFetchers.dataFetchersDelegateHumanFriends()))
			.type(newTypeWiring("Human").dataFetcher("comments", graphQLDataFetchers.dataFetchersDelegateHumanComments()))
			.type(newTypeWiring("Human").dataFetcher("appearsIn", graphQLDataFetchers.dataFetchersDelegateHumanAppearsIn()))
			// Data fetchers for DataFetchersDelegateDroid
			.type(newTypeWiring("Droid").dataFetcher("friends", graphQLDataFetchers.dataFetchersDelegateDroidFriends()))
			.type(newTypeWiring("Droid").dataFetcher("appearsIn", graphQLDataFetchers.dataFetchersDelegateDroidAppearsIn()))
			// Data fetchers for DataFetchersDelegateCharacter
			.type(newTypeWiring("Character").dataFetcher("friends", graphQLDataFetchers.dataFetchersDelegateCharacterFriends()))
			.type(newTypeWiring("Character").dataFetcher("friends", graphQLDataFetchers.dataFetchersDelegateCharacterFriends()))
			.type(newTypeWiring("Character").dataFetcher("appearsIn", graphQLDataFetchers.dataFetchersDelegateCharacterAppearsIn()))
			.type(newTypeWiring("Character").dataFetcher("appearsIn", graphQLDataFetchers.dataFetchersDelegateCharacterAppearsIn()))
			// Data fetchers for DataFetchersDelegateCommented
			.type(newTypeWiring("Commented").dataFetcher("comments", graphQLDataFetchers.dataFetchersDelegateCommentedComments()))
			.type(newTypeWiring("Commented").dataFetcher("comments", graphQLDataFetchers.dataFetchersDelegateCommentedComments()))
			// Data fetchers for DataFetchersDelegateAllFieldCasesInterface
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("comments", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceComments()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("comments", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceComments()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("booleans", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceBooleans()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("booleans", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceBooleans()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("aliases", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceAliases()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("aliases", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceAliases()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("planets", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfacePlanets()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("planets", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfacePlanets()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("friends", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceFriends()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("friends", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceFriends()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("oneWithIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceOneWithIdSubType()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("oneWithIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceOneWithIdSubType()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("oneWithIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceOneWithIdSubTypeWithDataLoader()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("oneWithIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceOneWithIdSubType()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("listWithIdSubTypes", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceListWithIdSubTypes()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("listWithIdSubTypes", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceListWithIdSubTypes()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("oneWithoutIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceOneWithoutIdSubType()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("oneWithoutIdSubType", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceOneWithoutIdSubType()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("listWithoutIdSubTypes", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceListWithoutIdSubTypes()))
			.type(newTypeWiring("AllFieldCasesInterface").dataFetcher("listWithoutIdSubTypes", graphQLDataFetchers.dataFetchersDelegateAllFieldCasesInterfaceListWithoutIdSubTypes()))
			// Data fetchers for DataFetchersDelegateAllFieldCasesWithIdSubtype
			// Data fetchers for DataFetchersDelegateWithID
			//
			// Let's link the interface types to the concrete types
			.type("WithID", typeWiring -> typeWiring.typeResolver(getWithIDResolver()))
			.type("Character", typeWiring -> typeWiring.typeResolver(getCharacterResolver()))
			.type("Commented", typeWiring -> typeWiring.typeResolver(getCommentedResolver()))
			.type("AllFieldCasesInterface", typeWiring -> typeWiring.typeResolver(getAllFieldCasesInterfaceResolver()))
			.build();
	}

	private TypeResolver getWithIDResolver() {
		return new TypeResolver() {
			@Override
			public GraphQLObjectType getType(TypeResolutionEnvironment env) {
				Object javaObject = env.getObject();
				String ret = null;

				if (javaObject instanceof AllFieldCases) {
					ret = "AllFieldCases";
				} else
				if (javaObject instanceof Human) {
					ret = "Human";
				} else
				if (javaObject instanceof Droid) {
					ret = "Droid";
				} else
				{
					throw new RuntimeException("Can't resolve javaObject " + javaObject.getClass().getName());
				}
				logger.trace("Resolved type for javaObject {} is {}", javaObject.getClass().getName());
				return env.getSchema().getObjectType(ret);
			}
		};
	}

	private TypeResolver getCharacterResolver() {
		return new TypeResolver() {
			@Override
			public GraphQLObjectType getType(TypeResolutionEnvironment env) {
				Object javaObject = env.getObject();
				String ret = null;

				if (javaObject instanceof Human) {
					ret = "Human";
				} else
				if (javaObject instanceof Droid) {
					ret = "Droid";
				} else
				{
					throw new RuntimeException("Can't resolve javaObject " + javaObject.getClass().getName());
				}
				logger.trace("Resolved type for javaObject {} is {}", javaObject.getClass().getName());
				return env.getSchema().getObjectType(ret);
			}
		};
	}

	private TypeResolver getCommentedResolver() {
		return new TypeResolver() {
			@Override
			public GraphQLObjectType getType(TypeResolutionEnvironment env) {
				Object javaObject = env.getObject();
				String ret = null;

				if (javaObject instanceof Human) {
					ret = "Human";
				} else
				{
					throw new RuntimeException("Can't resolve javaObject " + javaObject.getClass().getName());
				}
				logger.trace("Resolved type for javaObject {} is {}", javaObject.getClass().getName());
				return env.getSchema().getObjectType(ret);
			}
		};
	}

	private TypeResolver getAllFieldCasesInterfaceResolver() {
		return new TypeResolver() {
			@Override
			public GraphQLObjectType getType(TypeResolutionEnvironment env) {
				Object javaObject = env.getObject();
				String ret = null;

				if (javaObject instanceof AllFieldCasesInterfaceType) {
					ret = "AllFieldCasesInterfaceType";
				} else
				{
					throw new RuntimeException("Can't resolve javaObject " + javaObject.getClass().getName());
				}
				logger.trace("Resolved type for javaObject {} is {}", javaObject.getClass().getName());
				return env.getSchema().getObjectType(ret);
			}
		};
	}

}
