/** Generated by the default template from graphql-java-generator */
package org.allGraphQLCases.server;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("break")
public class _break  {

	public _break(){
		// No action
	}

	@GraphQLScalar(fieldName = "case", graphQLTypeName = "extends", javaClass = _extends.class)
	_extends _case;



	public void setCase(_extends _case) {
		this._case = _case;
	}

	public _extends getCase() {
		return _case;
	}

    public String toString() {
        return "_break {"
				+ "_case: " + _case
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Case("case");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private _extends _case;


		public Builder withCase(_extends _case) {
			this._case = _case;
			return this;
		}

		public _break build() {
			_break _object = new _break();
			_object.setCase(_case);
			return _object;
		}
	}
}
